{"version":3,"sources":["tictactoe/game.cljs"],"mappings":";AAEA,yBAAA,2CAAA,IAAA,KAAA,IAAA,IAAA,OAAA,5FAAKA;AAIL,2BAAA,3BAAMC,8DACHC,MAAMC,KAAKC;AADd,AAEE,GAAI,EAAI,wGAAA,xGAACC,6CAAE,AAACC,+CAAOJ,MAAMC,gBACjB,wGAAA,xGAACE,6CAAE,AAACC,+CAAOJ,MAAMC;AACvBD;;AACA,OAACK,mBAASL,MAAMC,KAAKC;;;AAGzB,4BAAA,5BAAMI,gEACHN;AADH,AAEE,GAAI,kkBAAA,kkBAAA,kkBAAA,kkBAAA,kkBAAA,kkBAAA,14GAAI,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAO,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHAC1D,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,qHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ;AAPjE;;AASE,GAAI,kkBAAA,kkBAAA,kkBAAA,kkBAAA,kkBAAA,kkBAAA,14GAAI,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAO,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHAC1D,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,uHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,qHACzD,oDAAA,pDAACG,wDAAM,qDAAA,mFAAA,IAAA,5IAACC,+CAAOJ,4JAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ,0GAAa,qDAAA,mFAAA,IAAA,5IAACI,+CAAOJ;AAPjE;;AASE,GAAI,AAACO,cAAI,eAAA,WAAAC,1BAACC;AAAD,AAAO,oDAAA,GAAAD,hDAACL;GAAQ,AAACO,kBAAQV;AAAlC;;AAAA;;;;;AAIN,yBAAA,zBAAMW,0DACHX;AADH,AAEE,IAAAY,qBAAA,+CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAE,mBAAAF;AAAA,AAAA,QAAA,AAAAG,gBAAAD,pBAAMsB;AAAN,AAAA,IAAApB,uBAAA;oEAAAC;AAAA,AAAA,YAAAN,kBAAA,KAAA;;AAAA,AAAA,IAAAM,eAAAA;;AAAA,AAAA,IAAAL,yBAAA,AAAAC,cAAAI;AAAA,AAAA,GAAAL;AAAA,AAAA,IAAAK,eAAAL;AAAA,AAAA,GAAA,AAAAM,6BAAAD;AAAA,IAAAE,kBAo6EiD,AAAA8B,sBAAAhC;IAp6EjDG,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCACMc;AADN,AAAA,GAEY,6CAAA,7CAACtC,gDAAK,qDAAA,rDAACC,+CAAOJ,yFAAOuC,EAAEE;AAFnC,AAAA,AAAAZ,uBAAAJ,SAAA,mFAGGc,EAAEE;;AAHL,eAAA,CAAAd,WAAA;;;;AAAA,eAAA,CAAAA,WAAA;;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,mDAAA,AAAAC,qBAAAb;;AAAA,OAAAU,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAP,gBAAAE,pBACMqB;AADN,AAAA,GAEY,6CAAA,7CAACtC,gDAAK,qDAAA,rDAACC,+CAAOJ,yFAAOuC,EAAEE;AAFnC,OAAAP,eAAA,+FAAA,AAAAF,mDAAA,AAAAG,eAAAf,9EAGGmB,EAAEE;;AAHL,eAAA,AAAAN,eAAAf;;;;;;AAAA;;;;;CAAA,KAAA;;;IAAAgB,mBAAA,AAAApB,cAAA,AAAAG,qBACQ,8CAAA,9CAACqB;AADT,AAAA,GAAAJ;AAAA,OAAAC,+CAAAD,iBAAA,AAAAE,qCAAA,AAAAH,eAAAtB;;AAAA,eAAA,AAAAsB,eAAAtB;;;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAQ,8CAAA,9CAAC4B;;;;AA4BX,2BAAA,3BAAME,8DACH1C,MAAME;AADT,AAEE,GAAI,oDAAA,pDAACC,6CAAED;AACL,IAAMyC,IAAE,6CAAA,7CAACC;AAAT,AACA,oBAAI,AAACtC,0BAAKN;AACR,IAAA6C,WAAS,AAACvC,0BAAKN;AAAf,AAAA,oHAAA6C,6CAAAA,zJAAC/C,uDAAAA,iEAAAA;;AACD,AACE,IAAAiD,mBAAA,AAAA/B,cAAe,AAACL,uBAAQX;IAAxBgD,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,mBAAA,AAAAD,wDAAAE,vEAAQI;AAAR,AAAA,AACE,AAACC,sBAAOZ,EAAE,iBAAAa,kBAAA,AAAAV,gBAAMH;IAANc,kBAAQ,iBAAAC,WAAW,4CAAA,5CAAC3D,yBAAUC,MAAMsD;IAA5BK,WAAA;AAAA,AAAA,wHAAAD,SAAAC,+CAAAD,SAAAC,jLAACjB,yDAAAA,4EAAAA;;AAAT,AAAA,SAAAc,kBAAAC,mBAAAD,kBAAAC;;;AADZ;AAAA,eAAAV;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAnC,2BAAA,AAAAC,cAAA+B;AAAA,AAAA,GAAAhC;AAAA,AAAA,IAAAgC,uBAAAhC;AAAA,AAAA,GAAA,AAAAM,6BAAA0B;AAAA,IAAAI,wBAAA,AAAAC,sBAAAL;AAAA,AAAA,eAAA,AAAAd,qBAAAc;eAAAI;eAAA,AAAA3B,gBAAA2B;eAAA;;;;;;;AAAA,mBAAA,AAAAjC,gBAAA6B,/BAAQO;AAAR,AAAA,AACE,AAACC,sBAAOZ,EAAE,iBAAAa,kBAAA,AAAAV,gBAAMH;IAANc,kBAAQ,iBAAAG,WAAW,4CAAA,5CAAC7D,yBAAUC,MAAMsD;IAA5BO,WAAA;AAAA,AAAA,wHAAAD,SAAAC,+CAAAD,SAAAC,jLAACnB,yDAAAA,4EAAAA;;AAAT,AAAA,SAAAc,kBAAAC,mBAAAD,kBAAAC;;;AADZ;AAAA,eAAA,AAAAJ,eAAAN;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AADF,OAAAD,gBAGGH;;;AACL,IAAMA,IAAE,6CAAA,7CAACC;AAAT,AACE,oBAAI,AAACtC,0BAAKN;AACR,IAAA8D,WAAS,AAACxD,0BAAKN;AAAf,AAAA,oHAAA8D,6CAAAA,zJAAChE,uDAAAA,iEAAAA;;AACD,AACE,IAAAiE,mBAAA,AAAA/C,cAAe,AAACL,uBAAQX;IAAxBgE,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,mBAAA,AAAAD,wDAAAE,vEAAQZ;AAAR,AAAA,AACE,AAACC,sBAAOZ,EAAE,iBAAAwB,kBAAA,AAAArB,gBAAMH;IAANyB,kBAAQ,iBAAAC,WAAW,4CAAA,5CAACtE,yBAAUC,MAAMsD;IAA5BgB,WAAA;AAAA,AAAA,wHAAAD,SAAAC,+CAAAD,SAAAC,jLAAC5B,yDAAAA,4EAAAA;;AAAT,AAAA,SAAAyB,kBAAAC,mBAAAD,kBAAAC;;;AADZ;AAAA,eAAAL;eAAAC;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAnD,2BAAA,AAAAC,cAAA+C;AAAA,AAAA,GAAAhD;AAAA,AAAA,IAAAgD,uBAAAhD;AAAA,AAAA,GAAA,AAAAM,6BAAA0C;AAAA,IAAAZ,wBAAA,AAAAC,sBAAAW;AAAA,AAAA,eAAA,AAAA9B,qBAAA8B;eAAAZ;eAAA,AAAA3B,gBAAA2B;eAAA;;;;;;;AAAA,mBAAA,AAAAjC,gBAAA6C,/BAAQT;AAAR,AAAA,AACE,AAACC,sBAAOZ,EAAE,iBAAAwB,kBAAA,AAAArB,gBAAMH;IAANyB,kBAAQ,iBAAAG,WAAW,4CAAA,5CAACxE,yBAAUC,MAAMsD;IAA5BkB,WAAA;AAAA,AAAA,wHAAAD,SAAAC,+CAAAD,SAAAC,jLAAC9B,yDAAAA,4EAAAA;;AAAT,AAAA,SAAAyB,kBAAAC,mBAAAD,kBAAAC;;;AADZ;AAAA,eAAA,AAAAf,eAAAU;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AADF,OAAAjB,gBAGGH;;;;AAIX,yBAAA,zBAAM8B,0DACHC,QAAQxE;AADX,AAEE,GAAI,oDAAA,pDAACC,6CAAED;AACL,IAAMyE,YAAU,AAACC,8CAAMC,cAAI,AAACC,4CAAIC,iBAAO,AAAC1C,+CAAOqC;AAA/C,AACE,OAACM,mBAAS,AAACF,4CAAI5D,gBAAM,+CAAA,WAAA+D,1DAACC;AAAD,AAAS,OAAC/E,6CAAEwE,UAAU,iBAAAM,jBAACF;GAAWL;;AACzD,IAAMS,YAAU,AAACP,8CAAMQ,cAAI,AAACN,4CAAIC,iBAAO,AAAC1C,+CAAOqC;AAA/C,AACE,OAACM,mBAAS,AAACF,4CAAI5D,gBAAM,+CAAA,WAAAmE,1DAACH;AAAD,AAAS,OAAC/E,6CAAEgF,UAAU,iBAAAE,jBAACN;GAAWL;;;AAI7D,8BAAA,9BAAMY,oEACHtF,MAAME;AADT,AAEE,OAACuE,uBACA,iBAAA7D,qBAAA,oDAAA2E;AAAA,AAAA,YAAAzE,kBAAA,KAAA;AAAA,AAAA,IAAAyE,eAAAA;;AAAA,AAAA,IAAAxE,qBAAA,AAAAC,cAAAuE;AAAA,AAAA,GAAAxE;AAAA,AAAA,IAAAwE,eAAAxE;AAAA,AAAA,GAAA,AAAAM,6BAAAkE;AAAA,IAAAjE,kBAu2EgD,AAAA8B,sBAAAmC;IAv2EhDhE,qBAAA,AAAAC,gBAAAF;IAAAkE,WAAA,AAAA9D,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAkE,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAlE;AAAA,aAAA,AAAAK,eAAAN,gBAAAmE,xCAAMnC;AAAN,AAAA,AAAA,AAAAzB,uBAAA2D,SAAA,mFACElC,OAAO,AAACZ,yBAAU,AAAC3C,yBAAUC,MAAMsD,OAAOpD,QAAQA;;AADpD,eAAA,CAAAuF,WAAA;;;;AAAA;;;;;AAAA,OAAA3D,qBAAA,AAAAC,gBAAAyD,UAAA,AAAAE,0CAAA,AAAAzD,qBAAAsD;;AAAA,OAAAzD,qBAAA,AAAAC,gBAAAyD,UAAA;;;AAAA,aAAA,AAAAtE,gBAAAqE,zBAAMjC;AAAN,AAAA,OAAApB,eAAA,iLAAA,AAAAwD,0CAAA,AAAAvD,eAAAoD,vJACEjC,OAAO,AAACZ,yBAAU,AAAC3C,yBAAUC,MAAMsD,OAAOpD,QAAQA;;;AADpD;;;;GAAA,KAAA;;AAAA,AAAA,OAAAU,mBAAa,AAACD,uBAAQX;KAEdE","names":["tictactoe.game/utility","tictactoe.game/play-move","board","move","player","cljs.core._EQ_","cljs.core.get_in","cljs.core/assoc-in","tictactoe.game/win?","cljs.core/not","p1__11609#","cljs.core/some","cljs.core/flatten","tictactoe.game/actions","iter__5523__auto__","s__11611","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__11613","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__11615","cljs.core/chunk-buffer","i__11614","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__11612","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__11610","i","cljs.core.range","j","tictactoe.game/ai-to-win","v","cljs.core.atom","G__11616","cljs.core/deref","seq__11617","chunk__11618","count__11619","i__11620","c__5568__auto__","cljs.core/chunk-first","cljs.core/next","action","cljs.core/reset!","x__5130__auto__","y__5131__auto__","G__11625","G__11626","G__11627","G__11628","G__11629","seq__11630","chunk__11631","count__11632","i__11633","x__5133__auto__","y__5134__auto__","G__11638","G__11639","G__11640","G__11641","tictactoe.game/chooser","options","max-value","cljs.core.apply","cljs.core/max","cljs.core.map","cljs.core/second","cljs.core/rand-nth","p1__11642#","cljs.core.filter","min-value","cljs.core/min","p1__11643#","tictactoe.game/ai-to-choose","s__11645","b__11647","i__11646","iter__11644"],"sourcesContent":["(ns tictactoe.game)\r\n\r\n(def utility {\"O\" -1\r\n              \"X\" 1\r\n              \"draw\" 0})\r\n\r\n(defn play-move\r\n  [board move player]\r\n  (if (or (= (get-in board move) \"X\")\r\n          (= (get-in board move) \"O\"))\r\n    board\r\n    (assoc-in board move player))\r\n  )\r\n\r\n(defn win?\r\n  [board]\r\n  (if (or (= \"X\" (get-in board [0 0]) (get-in board [0 1]) (get-in board [0 2]))\r\n          (= \"X\" (get-in board [1 0]) (get-in board [1 1]) (get-in board [1 2]))\r\n          (= \"X\"  (get-in board [2 0]) (get-in board [2 1]) (get-in board [2 2]))\r\n          (= \"X\" (get-in board [0 0]) (get-in board [1 0]) (get-in board [2 0]))\r\n          (= \"X\" (get-in board [0 1]) (get-in board [1 1]) (get-in board [2 1]))\r\n          (= \"X\" (get-in board [0 2]) (get-in board [1 2]) (get-in board [2 2]))\r\n          (= \"X\" (get-in board [0 0]) (get-in board [1 1]) (get-in board [2 2]))\r\n          (= \"X\" (get-in board [0 2]) (get-in board [1 1]) (get-in board [2 0])))\r\n    \"X\"\r\n    (if (or (= \"O\" (get-in board [0 0]) (get-in board [0 1]) (get-in board [0 2]))\r\n            (= \"O\" (get-in board [1 0]) (get-in board [1 1]) (get-in board [1 2]))\r\n            (= \"O\"  (get-in board [2 0]) (get-in board [2 1]) (get-in board [2 2]))\r\n            (= \"O\" (get-in board [0 0]) (get-in board [1 0]) (get-in board [2 0]))\r\n            (= \"O\" (get-in board [0 1]) (get-in board [1 1]) (get-in board [2 1]))\r\n            (= \"O\" (get-in board [0 2]) (get-in board [1 2]) (get-in board [2 2]))\r\n            (= \"O\" (get-in board [0 0]) (get-in board [1 1]) (get-in board [2 2]))\r\n            (= \"O\" (get-in board [0 2]) (get-in board [1 1]) (get-in board [2 0])))\r\n      \"O\"\r\n      (if (not (some #(= \"\" %) (flatten board)))\r\n        \"draw\"\r\n        nil))))\r\n\r\n(defn actions\r\n  [board]\r\n  (for [i (range 3)\r\n        j (range 3)\r\n        :when (= \"\" (get-in board [i j]))]\r\n    [i j]))\r\n\r\n;; Ai not owrking, will double check later \r\n\r\n`(defn max-value\r\n  [board]\r\n  (let [v (atom -1000)]\r\n    (if (win? board)\r\n      (utility (win? board)) \r\n      (do\r\n       (doseq [action (actions board)]\r\n         (reset! v (max @v (min-value (play-move board action \"O\")))))\r\n       @v))))`\r\n\r\n(defn min-value\r\n  [board]\r\n  (let [v (atom 1000)]\r\n    (if (win? board)\r\n      (utility (win? board))\r\n      (do\r\n       (doseq [action (actions board)]\r\n               (do (println (play-move board action \"X\"))\r\n                 (reset! v (min @v (max-value (play-move board action \"X\"))))))\r\n             @v))))\r\n\r\n(defn ai-to-win\r\n  [board player]\r\n  (if (= player \"X\")\r\n    (let [v (atom -1000)]\r\n    (if (win? board)\r\n      (utility (win? board))\r\n      (do\r\n        (doseq [action (actions board)]\r\n          (reset! v (max @v (ai-to-win (play-move board action \"O\") \"O\"))))\r\n        @v)))\r\n    (let [v (atom 1000)]\r\n      (if (win? board)\r\n        (utility (win? board))\r\n        (do\r\n          (doseq [action (actions board)]\r\n            (reset! v (min @v (ai-to-win (play-move board action \"X\") \"X\"))))\r\n          @v)))))\r\n\r\n\r\n\r\n(defn chooser\r\n  [options player]\r\n  (if (= player \"X\")\r\n    (let [max-value (apply max (map second (concat options)))]\r\n      (rand-nth (map first (filter #(= max-value (second %)) options))))\r\n    (let [min-value (apply min (map second (concat options)))]\r\n      (rand-nth (map first (filter #(= min-value (second %)) options))))))\r\n\r\n\r\n\r\n(defn ai-to-choose\r\n  [board player]\r\n  (chooser \r\n   (for [action (actions board)]\r\n   [ action (ai-to-win (play-move board action player) player)])\r\n           player))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}